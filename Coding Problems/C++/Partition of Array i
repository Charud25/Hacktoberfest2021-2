#include <bits/stdc++.h>
using namespace std;
// typedef long long int lli;
// #define pb push_back
// const lli mod=1e9+7;
const int K=3;

bool solve2(vector<int>&arr, int subsetSum[], bool taken[],
                   int subset, int N, int curIdx, int limitIdx){
   if (subsetSum[curIdx] == subset)
    {
       
        if (curIdx == K - 2)
            return true;
  
        
        return solve2(arr, subsetSum, taken, subset,
                                             N, curIdx + 1, N - 1);
    }
  
   
    for (int i = limitIdx; i >= 0; i--)
    {
        
        if (taken[i])
            continue;
        int tmp = subsetSum[curIdx] + arr[i];
  
       
        if (tmp <= subset)
        {
           
            taken[i] = true;
            subsetSum[curIdx] += arr[i];
            bool nxt = solve2(arr, subsetSum, taken,
                                            subset, N, curIdx, i - 1);
  
            
            taken[i] = false;
            subsetSum[curIdx] -= arr[i];
            if (nxt)
                return true;
        }
    }
    return false;
}

bool solve(vector<int>& arr, int N){
  if (N < K)
        return false;
  
    
    int sum = 0;
    for (int i = 0; i < N; i++)
        sum += arr[i];
    if (sum % K != 0)
        return false;
  
   
    int subset = sum / K;
    int subsetSum[K];
    bool taken[N];
  
    
    for (int i = 0; i < K; i++)
        subsetSum[i] = 0;
  
    
    for (int i = 0; i < N; i++)
        taken[i] = false;
  
   
    subsetSum[0] = arr[N - 1];
    taken[N - 1] = true;
  
   
    return solve2(arr, subsetSum, taken,
                                     subset, N, 0, N - 1);
}



int main()
{

	// #ifndef ONLINE_JUDGE
 //    freopen("input.txt", "r" ,stdin);
 //    freopen("output.txt","w" ,stdout);
 //    #endif


   int n;
   cin >> n;
   vector<int>a(n);
   for (int i = 0; i < n; ++i)
   {
     cin >>a[i];
   }

   cout <<solve(a,n)<<endl;









     
   
    






  






return 0;
}
